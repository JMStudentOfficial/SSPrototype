using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ScreenShape : MonoBehaviour
{
    [Header("Game Objects")]
    public GameObject[] shapes = new GameObject[3];
    private GameObject currentShape;

    [Space]

    [Header("Animators")]
    private Animator[] animator = new Animator[3];

    [Space]

    [Header("Ints")]
    private int arrayNav;
    private int previousShape;
    public int screenType;

    [Space]

    [Header("Strings")]
    private string[] bools = new string[3];

    [Space]

    [Header("Bools")]
    private bool[] isShapeActive = new bool[3]; //so i can use one perameter instead of the bellow 3, therefore allowing me to use for-loops 
    // 0 = cube, 1 = sphere, 2 = cylinder
    public bool nextShape;

    //private bool isCubeActive;
    //private bool isSphereActive;
    //private bool isCylinderActive;

    private void Start()
    {
        for (int i = 0; i < shapes.Length; i++)
        {
            animator[i] = shapes[i].GetComponent<Animator>(); //collecting animator components from each shape
        }

        Deactivate();

        bools[0] = "isCubeActive";
        bools[1] = "isSphereActive";
        bools[2] = "isCylinderActive";

        arrayNav = 0; //setting current array value to cube
        previousShape = 0;

        currentShape = shapes[arrayNav]; //setting current shape to cube
        isShapeActive[arrayNav] = true; //cube bool active
        nextShape = false;
        animator[arrayNav].SetBool(bools[arrayNav], true);
    }

    private void Update()
    {
        if (nextShape)
        {
            previousShape = arrayNav;
            arrayNav = Random.Range(1, 3);
            nextShape = false;

            //if (arrayNav == 3)
            //    arrayNav = 0;

            TransitionShape(arrayNav, previousShape);
        }
        //else if (Input.GetButtonDown("Fire1"))
        //{
        //    previousShape = arrayNav;
        //    arrayNav--;

        //    if (arrayNav == -1)
        //        arrayNav = 2;

        //    TransitionShape(arrayNav, previousShape);
        //}
    }

    void TransitionShape(int _arrayNav, int _previous)
    {
        currentShape = shapes[_arrayNav];
        screenType = _arrayNav;

        Deactivate();

        isShapeActive[_arrayNav] = true;

        animator[_previous].SetBool(bools[_previous], false);
        animator[_arrayNav].SetBool(bools[_arrayNav], true);
    }

    void Deactivate()
    {
        for (int i = 0; i < isShapeActive.Length; i++)
        {
            isShapeActive[i] = false;
        }

        for (int i = 0; i < isShapeActive.Length; i++)
        {
            animator[i].SetBool(bools[i], false);
        }
    }
}
