using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ShapeTransition : MonoBehaviour
{
    [Header("Game Objects")]
    public GameObject[] shapes = new GameObject[3];
    private GameObject currentShape;

    [Space]

    [Header("Animators")]
    private Animator[] animator = new Animator[3];

    [Space]

    [Header("Ints")]
    private int arrayNav;
    private int previousShape;
    private int colourNav;
    private int currentColour;

    [Space]

    [Header("Strings")]
    private string[] bools = new string[3];

    [Space]

    [Header("Bools")]
    private bool[] isShapeActive = new bool[3]; //so i can use one parameter instead of the bellow 3, therefore allowing me to use for-loops 
    // 0 = cube, 1 = sphere, 2 = cylinder

    //private bool isCubeActive;
    //private bool isSphereActive;
    //private bool isCylinderActive;

    private void Start()
    {
        for(int i = 0; i < shapes.Length; i++)
        {
            animator[i] = shapes[i].GetComponent<Animator>(); //collecting animator components from each shape
        }

        Deactivate();

        bools[0] = "isCubeActive";
        bools[1] = "isSphereActive";
        bools[2] = "isCylinderActive";

        arrayNav = 0; //setting current array value to cube
        previousShape = 0;
        currentColour = 0;
        colourNav = 0;
        TransitionColour(currentColour, colourNav);

        currentShape = shapes[arrayNav]; //setting current shape to cube
        isShapeActive[arrayNav] = true; //cube bool active
        animator[arrayNav].SetBool(bools[arrayNav], true);
    }

    private void Update()
    {
        if (Input.GetButtonDown("Fire2"))
        {
            previousShape = arrayNav;
            arrayNav++;

            if (arrayNav == 3)
                arrayNav = 0;

            TransitionShape(arrayNav, previousShape);
        }
        else if(Input.GetButtonDown("Fire1"))
        {
            previousShape = arrayNav;
            arrayNav--;

            if (arrayNav == -1)
                arrayNav = 2;
            
            TransitionShape(arrayNav, previousShape);
        }

        if(Input.GetButtonDown("space"))
        {
            colourNav++;

            if (colourNav > 2)
                colourNav = 0;

            TransitionColour(currentColour, colourNav);
        }
    }

    void TransitionShape(int _arrayNav, int _previous)
    {
        currentShape = shapes[_arrayNav];

        Deactivate();

        isShapeActive[_arrayNav] = true;

        animator[_arrayNav].SetBool(bools[_arrayNav], true);
        animator[_previous].SetBool(bools[_previous], false);
        SetPlayerShapeStat(_arrayNav);
    }

    void TransitionColour(int _currentColour, int _colourNav)
    {
        switch(_currentColour)
        {
            case 0:

                for (int i = 0; i < animator.Length; i++)
                {
                    animator[i].Play("G_to_R");
                    shapes[i].GetComponent<Material>().color = Color.red;
                }

                break;

            case 1:

                for (int i = 0; i < animator.Length; i++)
                {
                    animator[i].Play("R_to_B");
                    shapes[i].GetComponent<Material>().color = Color.blue;
                }

                break;

            case 2:

                for (int i = 0; i < animator.Length; i++)
                {
                    animator[i].Play("B_to_G");
                    shapes[i].GetComponent<Material>().color = Color.green;
                }

                break;
        }
        currentColour++;
        print("Colour Transitioned");
        SetPlayerColourStat(_colourNav);
    }

    void Deactivate()
    {
        for (int i = 0; i < isShapeActive.Length; i++)
        {
            isShapeActive[i] = false;
        }

        for (int i = 0; i < isShapeActive.Length; i++)
        {
            animator[i].SetBool(bools[i], false);
        }
    }

    void SetPlayerShapeStat(int __arrayNav)
    {
        PlayerStats.playerType = __arrayNav;
    }

    void SetPlayerColourStat(int __colourNav)
    {
        PlayerStats.playerColour = __colourNav;
    }
}
